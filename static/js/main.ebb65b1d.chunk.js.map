{"version":3,"sources":["components/search_bar.jsx","components/video_list_item.jsx","components/video_list.jsx","components/video_detail.jsx","serviceWorker.js","index.js"],"names":["SearchBar","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","term","_this2","react_default","a","createElement","className","value","onChange","event","setState","target","onKeyUp","onKeyPressed","keyCode","onSearchTermChange","Component","VideoListItem","_ref","video","onVideoSelect","imageUrl","snippet","thumbnails","default","url","onClick","src","alt","title","VideoList","videoItems","videos","map","video_list_item","key","etag","VideoDetail","videoId","id","concat","frameBorder","description","Boolean","window","location","hostname","match","App","selectedVideo","videoSearch","YTSearch","_this3","search_bar","video_detail","video_list","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ebb65b1d.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass SearchBar extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      term: \"\"\n    };\n  }\n  render() {\n    return (\n      <div className=\"search-bar\">\n        <input\n          value={this.state.term}\n          onChange={event => this.setState({ term: event.target.value })}\n          onKeyUp={event => this.onKeyPressed(event.keyCode)}\n        />\n      </div>\n    );\n  }\n\n  onKeyPressed(keyCode) {\n    if (keyCode !== 13) {\n      return;\n    }\n    this.props.onSearchTermChange(this.state.term);\n  }\n}\n\nexport default SearchBar;\n","import React from \"react\";\n\nconst VideoListItem = ({ video, onVideoSelect }) => {\n  const imageUrl = video.snippet.thumbnails.default.url;\n\n  return (\n    <li className=\"list-group-item\" onClick={() => onVideoSelect(video)}>\n      <div className=\"video-list media\">\n        <div className=\"media-left\">\n          <img src={imageUrl} alt=\"\" className=\"media-object\" />\n        </div>\n\n        <div className=\"media-body\">\n          <div className=\"media-heading\">{video.snippet.title}</div>\n        </div>\n      </div>\n    </li>\n  );\n};\n\nexport default VideoListItem;\n","import React from \"react\";\nimport VideoListLItem from \"./video_list_item\";\n\nconst VideoList = props => {\n  const videoItems = props.videos.map(video => {\n    return <VideoListLItem onVideoSelect={props.onVideoSelect} key={video.etag} video={video} />;\n  });\n\n  return <ul className=\"col-md-4 list-group\">{videoItems}</ul>;\n};\n\nexport default VideoList;\n","import React from \"react\";\n\nconst VideoDetail = ({ video }) => {\n  if (!video) {\n    return <div>Loading...</div>;\n  }\n\n  const videoId = video.id.videoId;\n  const url = `https://www.youtube.com/embed/${videoId}`;\n\n  return (\n    <div className=\"col-md-8 video-detail \">\n      <div className=\"embed-responsive embed-responsive-16by9\">\n        <iframe src={url} title=\"video-detail\" frameBorder=\"0\" className=\"embed-responsive-item\" />\n      </div>\n      <div className=\"details\">\n        <div>{video.snippet.title}</div>\n        <div>{video.snippet.description}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default VideoDetail;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport YTSearch from \"youtube-api-search\";\nimport SearchBar from \"./components/search_bar\";\nimport VideoList from \"./components/video_list\";\nimport VideoDetail from \"./components/video_detail\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nconst API_KEY = \"AIzaSyC5j5DFqaqDVcmRQ7cjBiYY9iJl9P5cNUc\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      videos: [],\n      selectedVideo: null\n    };\n\n    this.videoSearch(\"laioffer\");\n  }\n\n  videoSearch(term) {\n    YTSearch({ key: API_KEY, term: term }, videos => {\n      this.setState({\n        videos: videos,\n        selectedVideo: videos[0]\n      });\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <SearchBar onSearchTermChange={term => this.videoSearch(term)} />\n        <div className=\"row\">\n          <VideoDetail video={this.state.selectedVideo} />\n          <VideoList\n            onVideoSelect={selectedVideo => this.setState({ selectedVideo })}\n            videos={this.state.videos}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}